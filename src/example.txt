

// import React, { createContext, useContext, useState } from "react";

// const OrdersContext = createContext({ orders: [], addOrder: () => {} });

// export const OrdersProvider = ({ children }) => {
//   const [orders, setOrders] = useState([]);

//   const addOrder = (orderItems) => {
//     const newOrder = { id: Date.now(), items: orderItems }; // Add a unique ID
//     setOrders((prevOrders) => [...prevOrders, newOrder]); // Add the order
//   };

//   return (
//     <OrdersContext.Provider value={{ orders, addOrder }}>
//       {children}
//     </OrdersContext.Provider>
//   );
// };

// export const useOrders = () => useContext(OrdersContext);


cart.jsx



// import React, { useEffect, useState } from "react";
// import { useCart } from "../Context/CartContext"; // Use CartContext to manage cart state
// import { Link,useNavigate } from "react-router-dom";
// import { useOrders } from "../Context/OrderContext";
// import { toast } from "react-toastify";
// import Navbar from "../../Navbar";
// import axios from "axios";

// const Cart = () => {
//   const navigate=useNavigate()
//   const { cart, removeFromCart, updateQuantity } = useCart();
//   const { addOrder } = useOrders();
//   const [productDetails, setProductDetails] = useState([]); // To store product details

//   useEffect(() => {
//     // Fetch product details from db.json
//     axios
//       .get("http://localhost:5001/products")
//       .then((response) => {
//         setProductDetails(response.data);
//       })
//       .catch((error) => {
//         console.error("Error fetching product details:", error);
//       });
//   }, []);

//   const handleQuantityChange = (itemId, quantity) => {
//     updateQuantity(itemId, quantity);
//   };

//   // const handleCheckout = () => {
//   //   if (cart.length > 0) {
//   //     addOrder(cart); // Add the current cart items to orders
//   //     toast.success("Order placed successfully!");
//   //     // Clear the cart after placing the order
//   //     removeAllFromCart();
//   //   } else {
//   //     toast.error("Your cart is empty");
//   //   }
//   // };
  
//   const handleCheckout = () => {
//     if (cart.length > 0) {
//       navigate("/checkout"); // Navigate to the checkout page
//     } else {
//       toast.error("Your cart is empty");
//     }
//   };

//   // Remove all items from the cart
//   const removeAllFromCart = () => {
//     cart.forEach((item) => removeFromCart(item.id));
//   };

//   return (
//     <>
//       <Navbar />
//       <div className="container mx-auto p-4">
//         <h2 className="text-3xl font-semibold mb-6">Your Shopping Cart</h2>

//         {cart.length === 0 ? (
//           <p>
//             Your cart is empty.{" "}
//             <Link to="/" className="text-blue-500">
//               Go back to shop
//             </Link>
//           </p>
//         ) : (
//           <div className="space-y-6">
//             {cart.map((item) => {
//               const product = productDetails.find(
//                 (product) => product.id === item.id
//               );

//               return (
//                 <div key={item.id} className="flex items-center justify-between bg-white p-4 rounded-lg shadow-md">
//                   <div className="flex items-center space-x-4">
//                     <img
//                       src={product ? product.images : ""}
//                       alt={product ? product.name : "Product"}
//                       className="w-24 h-24 object-cover rounded-lg"
//                     />
//                     <div>
//                       <h3 className="font-semibold">{product ? product.name : "Loading..."}</h3>
//                       <p className="text-gray-500">Price: ${product ? product.price : "0"}</p>
//                     </div>
//                   </div>

//                   <div className="flex items-center space-x-4">
//                     <div className="flex items-center">
//                       <button
//                         className="bg-gray-200 px-2 py-1 rounded-md"
//                         onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
//                         disabled={item.quantity <= 1}
//                       >
//                         -
//                       </button>
//                       <input
//                         type="number"
//                         value={item.quantity}
//                         onChange={(e) => handleQuantityChange(item.id, parseInt(e.target.value))}
//                         className="w-12 text-center border p-1 rounded-md"
//                         min="1"
//                       />
//                       <button
//                         className="bg-gray-200 px-2 py-1 rounded-md"
//                         onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
//                       >
//                         +
//                       </button>
//                     </div>

//                     <p className="font-semibold">${product ? product.price * item.quantity : "0"}</p>

//                     <button
//                       className="text-red-500 hover:text-red-700"
//                       onClick={() => removeFromCart(item.id)}
//                     >
//                       Remove
//                     </button>
//                   </div>
//                 </div>
//               );
//             })}

//             <div className="flex justify-between items-center mt-6">
//               <Link to="/home" className="text-blue-500 hover:text-blue-700">
//                 Continue Shopping
//               </Link>
//               <div className="text-xl font-semibold">
//                 Total: $
//                 {cart.reduce(
//                   (total, item) => {
//                     const product = productDetails.find((product) => product.id === item.id);
//                     return total + (product ? product.price * item.quantity : 0);
//                   },
//                   0
//                 )}
//               </div>
//               <button
//                 className="bg-green-500 text-white px-6 py-3 rounded-md hover:bg-green-600"
//                 onClick={handleCheckout}
//               >
//                 Checkout
//               </button>
//             </div>
//           </div>
//         )}
//       </div>
//     </>
//   );
// };

// export default Cart;

cartDb.jsx

// import React, { useState, useEffect } from "react";
// import { useCart } from "../Context/CartContext";
// import { toast } from "react-toastify";
// import axios from "axios";

// const Cart = () => {
//   const { cart, removeFromCart, updateQuantity } = useCart();
//   const [productDetails, setProductDetails] = useState([]);
  
//   useEffect(() => {
//     // Fetch product details from db.json
//     axios
//       .get("http://localhost:5001/products")
//       .then((response) => {
//         setProductDetails(response.data);
//       })
//       .catch((error) => {
//         console.error("Error fetching product details:", error);
//       });
//   }, []);

//   const handleQuantityChange = (itemId, quantity) => {
//     updateQuantity(itemId, quantity);
//   };

//   const handleSaveCartToDb = () => {
//     // Save cart items to db.json (or any backend you are using)
//     axios
//       .post("http://localhost:5001/cart", cart) // Sending the cart data
//       .then((response) => {
//         toast.success("Cart saved successfully to DB!");
//       })
//       .catch((error) => {
//         console.error("Error saving cart to DB:", error);
//         toast.error("Failed to save cart to DB. Please try again.");
//       });
//   };

//   return (
//     <div>
//       <h2>Your Shopping Cart</h2>
//       {cart.length === 0 ? (
//         <p>Your cart is empty.</p>
//       ) : (
//         <div>
//           {cart.map((item) => {
//             const product = productDetails.find((product) => product.id === item.id);
//             return (
//               <div key={item.id}>
//                 <img src={product ? product.images : ""} alt={product.name} />
//                 <h3>{product ? product.name : "Loading..."}</h3>
//                 <p>Price: ${product ? product.price : "0"}</p>
//                 <div>
//                   <button onClick={() => handleQuantityChange(item.id, item.quantity - 1)}>-</button>
//                   <input
//                     type="number"
//                     value={item.quantity}
//                     onChange={(e) => handleQuantityChange(item.id, parseInt(e.target.value))}
//                   />
//                   <button onClick={() => handleQuantityChange(item.id, item.quantity + 1)}>+</button>
//                 </div>
//                 <button onClick={() => removeFromCart(item.id)}>Remove</button>
//               </div>
//             );
//           })}
//           <button onClick={handleSaveCartToDb}>Save Cart to DB</button>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Cart;








































// import React, { useState, useEffect } from "react";
// import { Link } from "react-router-dom";
// import { CiShoppingCart } from "react-icons/ci";
// import { useCart } from "./pages/Context/CartContext";
// import { useAuth } from "./pages/Context/AuthContext";

// function Navbar() {
//   const { cart } = useCart();
//   const { user, logout } = useAuth();

//   const [search, setSearch] = useState("");
//   const [products, setProducts] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);
//   const [isMenuOpen, setIsMenuOpen] = useState(false);

//   // Fetch products from a mock API or db.json
//   useEffect(() => {
//     fetch("http://localhost:5001/products") // Replace with your actual API endpoint
//       .then((response) => response.json())
//       .then((data) => {
//         setProducts(data);
//       })
//       .catch((error) => console.error("Error fetching products:", error));
//   }, []);

//   // Handle search input changes
//   const searchProduct = (e) => {
//     const value = e.target.value;
//     setSearch(value);

//     const searched = products.filter((item) =>
//       item.name.toLowerCase().includes(value.toLowerCase())
//     );

//     setFilteredProducts(searched);
//   };

//   const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

//   return (
//     <div className="sticky top-0 bg-white shadow-md z-50">
//       <nav className="bg-slate-200 p-4 sticky top-0 z-10">
//         <div className="container mx-auto flex justify-between items-center">
//           {/* Logo Section */}
//           <div className="text-4xl font-extrabold tracking-wider">
//             <Link to="/">
//               <span className="text-blue-500 italic">Shoe</span>
//               <span className="text-black transform scale-110">ZZ</span>
//             </Link>
//           </div>

//           {/* Search Section */}
//           <div className="hidden md:flex items-center border rounded-md p-2 w-96">
//             <input
//               type="text"
//               className="w-full border-none focus:outline-none px-2 py-1"
//               placeholder="Search for shoes..."
//               value={search}
//               onChange={searchProduct}
//             />
//             <button className="bg-blue-500 text-white px-4 py-2 ml-2 rounded-md hover:bg-blue-600 transition duration-200">
//               Search
//             </button>
//           </div>

//           {/* Dropdown for Search Results */}
//           {search && (
//             <div className="absolute top-16 bg-white border rounded-md shadow-md w-96 p-4 z-50">
//               {filteredProducts.length > 0 ? (
//                 filteredProducts.map((product) => (
//                   <Link
//                     to={`/productdetails/${product.id}`}
//                     key={product.id}
//                     className="block p-2 hover:bg-gray-100"
//                   >
//                     {product.name}
//                   </Link>
//                 ))
//               ) : (
//                 <div className="p-2 text-gray-500">No products found</div>
//               )}
//             </div>
//           )}

//           {/* Right Side Links */}
//           <div className="hidden md:flex items-center space-x-6">
//             <Link to="/cart" className="relative">
//               <CiShoppingCart size={30} />
//               <span className="absolute top-0 right-0 bg-red-500 text-white text-sm w-5 h-5 rounded-full flex justify-center items-center">
//                 {cart.length}
//               </span>
//             </Link>
//             {user ? (
//               <>
//                 <span className="text-lg">Welcome, {user.name}</span>
//                 <button
//                   className="bg-red-500 text-white px-4 py-2 rounded-md"
//                   onClick={logout}
//                 >
//                   Logout
//                 </button>
//               </>
//             ) : (
//               <>
//                 <Link to="/login" className="text-lg">
//                   Login
//                 </Link>
//                 <Link to="/register" className="text-lg">
//                   Register
//                 </Link>
//               </>
//             )}
//           </div>

//           {/* Mobile Menu Toggle */}
//           <button className="md:hidden text-black" onClick={toggleMenu}>
//             <svg
//               xmlns="http://www.w3.org/2000/svg"
//               className="h-6 w-6"
//               fill="none"
//               viewBox="0 0 24 24"
//               stroke="currentColor"
//             >
//               <path
//                 strokeLinecap="round"
//                 strokeLinejoin="round"
//                 strokeWidth="2"
//                 d="M4 6h16M4 12h16M4 18h16"
//               />
//             </svg>
//           </button>
//         </div>
//       </nav>

//       {/* Mobile Menu */}
//       {isMenuOpen && (
//         <div className="md:hidden flex flex-col space-y-4 bg-slate-200 p-4">
//           <Link to="/" className="text-black hover:text-gray-400">
//             Home
//           </Link>
//           <Link to="/men" className="text-black hover:text-gray-400">
//             Men
//           </Link>
//           <Link to="/women" className="text-black hover:text-gray-400">
//             Women
//           </Link>
//           <Link to="/cart" className="text-black hover:text-gray-400">
//             Cart
//           </Link>
//           <Link to="/login" className="text-black hover:text-gray-400">
//             Login
//           </Link>
//           <Link to="/register" className="text-black hover:text-gray-400">
//             Register
//           </Link>
//         </div>
//       )}
//     </div>
//   );
// }

// export default Navbar;





















import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { CiShoppingCart } from "react-icons/ci";
import { useCart } from "./pages/Context/CartContext";
import { useAuth } from "./pages/Context/AuthContext";

function Navbar() {
  const { cart } = useCart();
  const { user, logout } = useAuth();

  const [search, setSearch] = useState("");
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Fetch products from a mock API or db.json
  useEffect(() => {
    fetch("http://localhost:5001/products") // Replace with your actual API endpoint
      .then((response) => response.json())
      .then((data) => {
        setProducts(data);
      })
      .catch((error) => console.error("Error fetching products:", error));
  }, []);

  // Handle search input changes
  const searchProduct = (e) => {
    const value = e.target.value;
    setSearch(value);

    const searched = products.filter((item) =>
      item.name.toLowerCase().includes(value.toLowerCase())
    );

    setFilteredProducts(searched);
  };

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  return (
    <div className="sticky top-0 bg-white shadow-md z-50">
      <nav className="bg-slate-200 p-4 sticky top-0 z-10">
        <div className="container mx-auto flex justify-between items-center">
          {/* Logo Section */}
          <div className="text-4xl font-extrabold tracking-wider">
            <Link to="/">
              <span className="text-blue-500 italic">Shoe</span>
              <span className="text-black transform scale-110">ZZ</span>
            </Link>
          </div>

          {/* Search Section */}
          <div className="hidden md:flex items-center border rounded-md p-2 w-96">
            <input
              type="text"
              className="w-full border-none focus:outline-none px-2 py-1"
              placeholder="Search for shoes..."
              value={search}
              onChange={searchProduct}
            />
            <button className="bg-blue-500 text-white px-4 py-2 ml-2 rounded-md hover:bg-blue-600 transition duration-200">
              Search
            </button>
          </div>

          {/* Dropdown for Search Results */}
          {search && (
            <div className="absolute top-16 bg-white border rounded-md shadow-md w-96 p-4 z-50">
              {filteredProducts.length > 0 ? (
                filteredProducts.map((product) => (
                  <Link
                    to={`/productdetails/${product.id}`}
                    key={product.id}
                    className="block p-2 hover:bg-gray-100"
                  >
                    {product.name}
                  </Link>
                ))
              ) : (
                <div className="p-2 text-gray-500">No products found</div>
              )}
            </div>
          )}

          {/* Right Side Links */}
          <div className="hidden md:flex items-center space-x-6">
            <Link to="/cart" className="relative">
              <CiShoppingCart size={30} />
              <span className="absolute top-0 right-0 bg-red-500 text-white text-sm w-5 h-5 rounded-full flex justify-center items-center">
                {cart.length}
              </span>
            </Link>
            {user ? (
              <>
                <span className="text-lg">Welcome, {user.name}</span>
                <button
                  className="bg-red-500 text-white px-4 py-2 rounded-md"
                  onClick={logout}
                >
                  Logout
                </button>
              </>
            ) : (
              <>
                <Link to="/login" className="text-lg">
                  Login
                </Link>
                <Link to="/register" className="text-lg">
                  Register
                </Link>
              </>
            )}
          </div>

          {/* Mobile Menu Toggle */}
          <button className="md:hidden text-black" onClick={toggleMenu}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
          </button>
        </div>
      </nav>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="md:hidden flex flex-col space-y-4 bg-slate-200 p-4">
          <Link to="/" className="text-black hover:text-gray-400">
            Home
          </Link>
          <Link to="/men" className="text-black hover:text-gray-400">
            Men
          </Link>
          <Link to="/women" className="text-black hover:text-gray-400">
            Women
          </Link>
          <Link to="/cart" className="text-black hover:text-gray-400">
            Cart
          </Link>
          <Link to="/login" className="text-black hover:text-gray-400">
            Login
          </Link>
          <Link to="/register" className="text-black hover:text-gray-400">
            Register
          </Link>
        </div>
      )}
    </div>
  );
}

export default Navbar;
